{"name":"Singleton Design pattern","tagline":"Sample application displays Singleton desing Pattern implementation ","body":"_**What is Singleton Design Pattern:**_\r\n\r\nThe Singleton pattern ensures that a class has only one instance and provides a global point of access to that instance. It is often used for a logging class so only one object has access to log files, or when there is a single resource, where there should only be a single object in charge of accessing the single resource.\r\n\r\n**_When to use it:_**\r\n\r\nIf Application needs one, and only one, instance of an object. Additionally, lazy initialization and global access are necessary.\r\n\r\n_**Checklist for class Design:**_\r\n\r\n* Define a private static attribute in the \"single instance\" class.\r\n* Define a public static accessor function in the class.\r\n* Do \"lazy initialization\" (creation on first use) in the accessor function.\r\n* Define all constructors to be protected or private.\r\n* Clients may only use the accessor function to manipulate the Singleton.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}